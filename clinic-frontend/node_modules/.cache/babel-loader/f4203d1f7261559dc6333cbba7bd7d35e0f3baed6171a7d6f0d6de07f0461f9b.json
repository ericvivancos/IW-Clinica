{"ast":null,"code":"var _jsxFileName = \"D:\\\\UA-Ingenieria_Web\\\\Pr\\xE1cticas\\\\Parte 2\\\\Grupal\\\\IW-Clinica\\\\clinic-frontend\\\\src\\\\components\\\\Clientes\\\\Reservas\\\\CalendarioCliente.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { getReservas } from \"../../../services/api\"; // Servicio para obtener reservas\nimport ModalCrearReserva from \"../../Modals/ModalCrearReserva\";\nimport esLocale from \"@fullcalendar/core/locales/es\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalendarioCliente = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [selectedSlot, setSelectedSlot] = useState(null); // Para nuevos slots\n  const [selectedRange, setSelectedRange] = useState(null); // Para rangos de slots\n  const [isCrearModalOpen, setIsCrearModalOpen] = useState(false); // Modal de crear reserva\n\n  // Cargar reservas desde el backend\n  const fetchReservas = async () => {\n    try {\n      const reservas = await getReservas();\n      // Transformar las reservas en el formato requerido por FullCalendar\n      const transformedEvents = reservas.map(reserva => ({\n        id: reserva.id,\n        title: \"Reservado\",\n        start: `${reserva.fecha}T${reserva.horaInicio}`,\n        end: `${reserva.fecha}T${reserva.horaFin}`,\n        backgroundColor: \"#D3D3D3\",\n        // Gris\n        borderColor: \"#A9A9A9\",\n        extendedProps: {\n          // Incluimos datos adicionales en caso de uso futuro\n          estado: reserva.estado,\n          pagada: reserva.pagada\n        }\n      }));\n      setEvents(transformedEvents);\n    } catch (error) {\n      console.error(\"Error al cargar las reservas:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchReservas();\n  });\n\n  // Seleccionar un rango de slots\n  const handleSelectRange = info => {\n    setSelectedRange({\n      start: info.startStr,\n      end: info.endStr\n    });\n    setSelectedSlot(null); // Limpia selección única\n    setIsCrearModalOpen(true);\n  };\n\n  // Cerrar modales\n  const handleCloseModal = () => {\n    setIsCrearModalOpen(false);\n    setSelectedSlot(null);\n    setSelectedRange(null);\n  };\n  const handleSaveReserva = async () => {\n    try {\n      await fetchReservas();\n    } catch (error) {\n      console.error(\"Error al actualizar las reservas después de guardar:\", error);\n    }\n    handleCloseModal();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 max-w-5xl mx-auto bg-gray-50\",\n    children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [timeGridPlugin, interactionPlugin],\n      initialView: \"timeGridWeek\",\n      locale: esLocale,\n      allDaySlot: false,\n      slotMinTime: \"09:00:00\",\n      slotMaxTime: \"14:00:00\",\n      selectable: true,\n      hiddenDays: [0, 6],\n      events: events,\n      select: handleSelectRange // Para seleccionar slots\n      ,\n      headerToolbar: {\n        left: \"prev,next today\",\n        center: \"title\",\n        right: \"timeGridWeek,timeGridDay\"\n      },\n      slotLabelFormat: {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        hour12: false\n      },\n      selectAllow: selectInfo => {\n        const now = new Date(); // Fecha actual\n        const start = selectInfo.start.getTime();\n        const end = selectInfo.end.getTime();\n\n        // No permitir selección antes de hoy\n        if (start < now.setHours(0, 0, 0, 0)) {\n          return false;\n        }\n\n        // Permitir selección solo si no cruza días\n        const startDay = selectInfo.start.getDate();\n        const endDay = selectInfo.end.getDate();\n        return startDay === endDay; // Permite solo si es el mismo día\n      },\n      slotEventOverlap: false,\n      eventContent: eventInfo => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cursor-pointer\",\n        children: eventInfo.event.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), isCrearModalOpen && /*#__PURE__*/_jsxDEV(ModalCrearReserva, {\n      onClose: handleCloseModal,\n      slot: selectedSlot || selectedRange // Pasa slot único o rango\n      ,\n      onSave: handleSaveReserva,\n      rol: \"CLIENTE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(CalendarioCliente, \"9AKTcddg3sk/kOFPtFqzzptEEvU=\");\n_c = CalendarioCliente;\nexport default CalendarioCliente;\nvar _c;\n$RefreshReg$(_c, \"CalendarioCliente\");","map":{"version":3,"names":["React","useState","useEffect","FullCalendar","timeGridPlugin","interactionPlugin","getReservas","ModalCrearReserva","esLocale","jsxDEV","_jsxDEV","CalendarioCliente","_s","events","setEvents","selectedSlot","setSelectedSlot","selectedRange","setSelectedRange","isCrearModalOpen","setIsCrearModalOpen","fetchReservas","reservas","transformedEvents","map","reserva","id","title","start","fecha","horaInicio","end","horaFin","backgroundColor","borderColor","extendedProps","estado","pagada","error","console","handleSelectRange","info","startStr","endStr","handleCloseModal","handleSaveReserva","className","children","plugins","initialView","locale","allDaySlot","slotMinTime","slotMaxTime","selectable","hiddenDays","select","headerToolbar","left","center","right","slotLabelFormat","hour","minute","hour12","selectAllow","selectInfo","now","Date","getTime","setHours","startDay","getDate","endDay","slotEventOverlap","eventContent","eventInfo","event","fileName","_jsxFileName","lineNumber","columnNumber","onClose","slot","onSave","rol","_c","$RefreshReg$"],"sources":["D:/UA-Ingenieria_Web/Prácticas/Parte 2/Grupal/IW-Clinica/clinic-frontend/src/components/Clientes/Reservas/CalendarioCliente.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport { getReservas } from \"../../../services/api\"; // Servicio para obtener reservas\r\nimport ModalCrearReserva from \"../../Modals/ModalCrearReserva\";\r\nimport esLocale from \"@fullcalendar/core/locales/es\";\r\n\r\nconst CalendarioCliente = () => {\r\n    const [events, setEvents] = useState([]);\r\n    const [selectedSlot, setSelectedSlot] = useState(null); // Para nuevos slots\r\n    const [selectedRange, setSelectedRange] = useState(null); // Para rangos de slots\r\n    const [isCrearModalOpen, setIsCrearModalOpen] = useState(false); // Modal de crear reserva\r\n\r\n    // Cargar reservas desde el backend\r\n        const fetchReservas = async () => {\r\n            try {\r\n                const reservas = await getReservas();\r\n                // Transformar las reservas en el formato requerido por FullCalendar\r\n                const transformedEvents = reservas.map((reserva) => ({\r\n                    id: reserva.id,\r\n                    title: \"Reservado\",\r\n                    start: `${reserva.fecha}T${reserva.horaInicio}`,\r\n                    end: `${reserva.fecha}T${reserva.horaFin}`,\r\n                    backgroundColor: \"#D3D3D3\", // Gris\r\n                    borderColor: \"#A9A9A9\",\r\n                    extendedProps: {\r\n                        // Incluimos datos adicionales en caso de uso futuro\r\n                        estado: reserva.estado,\r\n                        pagada: reserva.pagada,\r\n                    },\r\n                }));\r\n                setEvents(transformedEvents);\r\n            } catch (error) {\r\n                console.error(\"Error al cargar las reservas:\", error);\r\n            }\r\n        };\r\n        useEffect( () => {\r\n            fetchReservas();\r\n        });\r\n \r\n\r\n    // Seleccionar un rango de slots\r\n    const handleSelectRange = (info) => {\r\n        setSelectedRange({\r\n            start: info.startStr,\r\n            end: info.endStr,\r\n        });\r\n        setSelectedSlot(null); // Limpia selección única\r\n        setIsCrearModalOpen(true);\r\n    };\r\n\r\n    // Cerrar modales\r\n    const handleCloseModal = () => {\r\n        setIsCrearModalOpen(false);\r\n        setSelectedSlot(null);\r\n        setSelectedRange(null);\r\n    };\r\n\r\n    const handleSaveReserva = async () => {\r\n        try {\r\n            await fetchReservas();\r\n        }\r\n        catch(error){\r\n            console.error(\"Error al actualizar las reservas después de guardar:\", error);\r\n        }\r\n        handleCloseModal();\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-4 max-w-5xl mx-auto bg-gray-50\">\r\n            <FullCalendar\r\n                plugins={[timeGridPlugin, interactionPlugin]}\r\n                initialView=\"timeGridWeek\"\r\n                locale={esLocale}\r\n                allDaySlot={false}\r\n                slotMinTime=\"09:00:00\"\r\n                slotMaxTime=\"14:00:00\"\r\n                selectable={true}\r\n                hiddenDays={[0, 6]}\r\n                events={events}\r\n                select={handleSelectRange} // Para seleccionar slots\r\n                headerToolbar={{\r\n                    left: \"prev,next today\",\r\n                    center: \"title\",\r\n                    right: \"timeGridWeek,timeGridDay\",\r\n                }}\r\n                slotLabelFormat={{\r\n                    hour: \"2-digit\",\r\n                    minute: \"2-digit\",\r\n                    hour12: false,\r\n                }}\r\n                selectAllow={(selectInfo) => {\r\n                    const now = new Date(); // Fecha actual\r\n                    const start = selectInfo.start.getTime();\r\n                    const end = selectInfo.end.getTime();\r\n\r\n                    // No permitir selección antes de hoy\r\n                    if (start < now.setHours(0, 0, 0, 0)) {\r\n                        return false;\r\n                    }\r\n\r\n                    // Permitir selección solo si no cruza días\r\n                    const startDay = selectInfo.start.getDate();\r\n                    const endDay = selectInfo.end.getDate();\r\n                    return startDay === endDay; // Permite solo si es el mismo día\r\n                }}\r\n                slotEventOverlap={false}\r\n                eventContent={(eventInfo) => (\r\n                    <div className=\"cursor-pointer\">\r\n                        {eventInfo.event.title}\r\n                    </div>\r\n                )}\r\n            />\r\n\r\n            {/* Modal para crear una reserva */}\r\n            {isCrearModalOpen && (\r\n                <ModalCrearReserva\r\n                    onClose={handleCloseModal}\r\n                    slot={selectedSlot || selectedRange} // Pasa slot único o rango\r\n                    onSave={handleSaveReserva}\r\n                    rol=\"CLIENTE\"\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CalendarioCliente;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}