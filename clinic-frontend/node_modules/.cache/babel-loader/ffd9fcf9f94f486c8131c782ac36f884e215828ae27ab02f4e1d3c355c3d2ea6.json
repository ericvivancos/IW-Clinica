{"ast":null,"code":"var _jsxFileName = \"D:\\\\UA-Ingenieria_Web\\\\Pr\\xE1cticas\\\\Parte 2\\\\Grupal\\\\IW-Clinica\\\\clinic-frontend\\\\src\\\\components\\\\Administradores\\\\Dashboard\\\\InformesIngresos.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend } from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport { obtenerResumenIngresos } from \"../../../services/api\";\n\n// Registrar los componentes de Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend);\nconst InformesIngresosLinea = () => {\n  _s();\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    const fetchIngresos = async () => {\n      try {\n        const resumen = await obtenerResumenIngresos();\n\n        // Procesar datos para el grÃ¡fico\n        const labels = resumen.map(item => new Date(item.timestamp).toLocaleTimeString(\"es-ES\", {\n          hour: \"2-digit\",\n          minute: \"2-digit\"\n        }));\n        const valores = resumen.map(item => item.amount);\n\n        // ConfiguraciÃ³n de datos para Chart.js\n        setData({\n          labels,\n          // Eje X: Tiempo\n          datasets: [{\n            label: \"Ingresos (â‚¬)\",\n            data: valores,\n            // Eje Y: Monto\n            borderColor: \"#36A2EB\",\n            // Color de la lÃ­nea\n            backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n            // Relleno\n            pointBackgroundColor: \"#36A2EB\",\n            pointBorderColor: \"#fff\",\n            tension: 0.4 // Suavizado de la lÃ­nea\n          }]\n        });\n      } catch (error) {\n        console.error(\"Error al obtener los ingresos:\", error);\n      }\n    };\n    fetchIngresos();\n  }, []);\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Cargando ingresos...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white p-4 rounded shadow\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-lg font-bold mb-4\",\n      children: \"\\uD83D\\uDCC8 Ingresos por Hora\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(InformesIngresosLinea, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n_c = InformesIngresosLinea;\nexport default InformesIngresosLinea;\nvar _c;\n$RefreshReg$(_c, \"InformesIngresosLinea\");","map":{"version":3,"names":["React","useEffect","useState","Chart","ChartJS","LineElement","CategoryScale","LinearScale","PointElement","Tooltip","Legend","Line","obtenerResumenIngresos","jsxDEV","_jsxDEV","register","InformesIngresosLinea","_s","data","setData","fetchIngresos","resumen","labels","map","item","Date","timestamp","toLocaleTimeString","hour","minute","valores","amount","datasets","label","borderColor","backgroundColor","pointBackgroundColor","pointBorderColor","tension","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["D:/UA-Ingenieria_Web/PrÃ¡cticas/Parte 2/Grupal/IW-Clinica/clinic-frontend/src/components/Administradores/Dashboard/InformesIngresos.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Chart as ChartJS,\r\n    LineElement,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    Tooltip,\r\n    Legend,\r\n} from \"chart.js\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { obtenerResumenIngresos } from \"../../../services/api\";\r\n\r\n// Registrar los componentes de Chart.js\r\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend);\r\n\r\nconst InformesIngresosLinea = () => {\r\n    const [data, setData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchIngresos = async () => {\r\n            try {\r\n                const resumen = await obtenerResumenIngresos();\r\n\r\n                // Procesar datos para el grÃ¡fico\r\n                const labels = resumen.map((item) =>\r\n                    new Date(item.timestamp).toLocaleTimeString(\"es-ES\", { hour: \"2-digit\", minute: \"2-digit\" })\r\n                );\r\n                const valores = resumen.map((item) => item.amount);\r\n\r\n                // ConfiguraciÃ³n de datos para Chart.js\r\n                setData({\r\n                    labels, // Eje X: Tiempo\r\n                    datasets: [\r\n                        {\r\n                            label: \"Ingresos (â‚¬)\",\r\n                            data: valores, // Eje Y: Monto\r\n                            borderColor: \"#36A2EB\", // Color de la lÃ­nea\r\n                            backgroundColor: \"rgba(54, 162, 235, 0.2)\", // Relleno\r\n                            pointBackgroundColor: \"#36A2EB\",\r\n                            pointBorderColor: \"#fff\",\r\n                            tension: 0.4, // Suavizado de la lÃ­nea\r\n                        },\r\n                    ],\r\n                });\r\n            } catch (error) {\r\n                console.error(\"Error al obtener los ingresos:\", error);\r\n            }\r\n        };\r\n\r\n        fetchIngresos();\r\n    }, []);\r\n\r\n    if (!data) {\r\n        return <p>Cargando ingresos...</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"bg-white p-4 rounded shadow\">\r\n            <h3 className=\"text-lg font-bold mb-4\">ðŸ“ˆ Ingresos por Hora</h3>\r\n            <Line data={data} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InformesIngresosLinea;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SACIC,KAAK,IAAIC,OAAO,EAChBC,WAAW,EACXC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,OAAO,EACPC,MAAM,QACH,UAAU;AACjB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,sBAAsB,QAAQ,uBAAuB;;AAE9D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAV,OAAO,CAACW,QAAQ,CAACV,WAAW,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,OAAO,EAAEC,MAAM,CAAC;AAExF,MAAMM,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACZ,MAAMmB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA,MAAMC,OAAO,GAAG,MAAMT,sBAAsB,CAAC,CAAC;;QAE9C;QACA,MAAMU,MAAM,GAAGD,OAAO,CAACE,GAAG,CAAEC,IAAI,IAC5B,IAAIC,IAAI,CAACD,IAAI,CAACE,SAAS,CAAC,CAACC,kBAAkB,CAAC,OAAO,EAAE;UAAEC,IAAI,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAU,CAAC,CAC/F,CAAC;QACD,MAAMC,OAAO,GAAGT,OAAO,CAACE,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACO,MAAM,CAAC;;QAElD;QACAZ,OAAO,CAAC;UACJG,MAAM;UAAE;UACRU,QAAQ,EAAE,CACN;YACIC,KAAK,EAAE,cAAc;YACrBf,IAAI,EAAEY,OAAO;YAAE;YACfI,WAAW,EAAE,SAAS;YAAE;YACxBC,eAAe,EAAE,yBAAyB;YAAE;YAC5CC,oBAAoB,EAAE,SAAS;YAC/BC,gBAAgB,EAAE,MAAM;YACxBC,OAAO,EAAE,GAAG,CAAE;UAClB,CAAC;QAET,CAAC,CAAC;MACN,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MAC1D;IACJ,CAAC;IAEDnB,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACF,IAAI,EAAE;IACP,oBAAOJ,OAAA;MAAA2B,QAAA,EAAG;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACtC;EAEA,oBACI/B,OAAA;IAAKgC,SAAS,EAAC,6BAA6B;IAAAL,QAAA,gBACxC3B,OAAA;MAAIgC,SAAS,EAAC,wBAAwB;MAAAL,QAAA,EAAC;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChE/B,OAAA,CAACH,IAAI;MAACO,IAAI,EAAEA;IAAK;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEd,CAAC;AAAC5B,EAAA,CA/CID,qBAAqB;AAAA+B,EAAA,GAArB/B,qBAAqB;AAiD3B,eAAeA,qBAAqB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}